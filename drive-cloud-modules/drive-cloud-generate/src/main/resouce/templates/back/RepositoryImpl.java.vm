package ${cfg.modulesPack}.repository.impl;

import com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;
import ${cfg.modulesPack}.pojo.entity.${entity}Entity;
import cn.afterturn.easypoi.excel.entity.ExportParams;
import ${cfg.BaseController};
import ${cfg.modulesPack}.repository.${entity}Repository;
import ${cfg.modulesPack}.pojo.entity.*;
import ${cfg.modulesPack}.pojo.vo.*;
import ${cfg.modulesPack}.pojo.dto.*;
import ${cfg.modulesPack}.service.mapstruct.*;
import com.baomidou.mybatisplus.core.metadata.IPage;
import com.baomidou.mybatisplus.extension.plugins.pagination.Page;
import cn.hutool.core.util.StrUtil;
import com.drive.common.core.biz.R;
import com.drive.common.core.biz.SubResultCode;
import com.drive.common.core.utils.BeanConvertUtils;
import lombok.extern.slf4j.Slf4j;
import com.drive.common.core.biz.ResObject;
import org.springframework.beans.factory.annotation.Autowired;
import ${cfg.modulesPack}.service.${entity}Service;
import com.drive.common.data.utils.ExcelUtils;
import java.util.List;
import java.util.Arrays;
import java.io.IOException;
import javax.servlet.http.HttpServletResponse;
import org.springframework.stereotype.Service;
## 将变量首字母变小写，定义驼峰法变量名
#set($className = $!cfg.stringUtils.uncapitalize($!entity))

#foreach($field in ${table.fields})
    #if(${field.keyFlag})
        #set($pkColumn = ${field})
    #end
#end

/**
 *
 * $!{table.comment} 服务类
 *
 * @author ${author}
 */
@Slf4j
@Service
public class  ${entity}RepositoryImpl extends BaseController<${entity}PageQueryParam, ${entity}Entity>  implements ${entity}Repository{

    @Autowired
    private ${entity}Service ${className}Service;
    @Autowired
    private ${entity}MapStruct ${className}MapStruct;

    /*
     *
     *功能描述
     * @author ${author}
     * @description ${table.comment} 分页列表
     * @date 2020/2/12 17:09
     * @param  * @param ${entity}PageQueryParam
     * @return
     */
    @Override
    public ResObject pageList(${entity}PageQueryParam param) {
        log.info(this.getClass() + "pageList-方法请求参数{}",param);
        Page<${entity}Entity> page = new Page<>(param.getPageNum(), param.getPageSize());
        IPage<${entity}Entity> pageList = ${className}Service.page(page, this.getQueryWrapper(${className}MapStruct, param));
        Page<${entity}Vo> ${className}VoPage = ${className}MapStruct.toVoList(pageList);
        log.info(this.getClass() + "pageList-方法请求结果{}",${className}VoPage);
        return R.success(${className}VoPage);
    }

    @Override
    public ResObject findList(${entity}PageQueryParam param) {
        log.info(this.getClass() + "findList-方法请求参数{}",param);
        // 这里判断条件进行查询
        QueryWrapper queryWrapper= this.getQueryWrapper(${className}MapStruct, param);
        // 如 queryWrapper.eq(StrUtil.isNotEmpty(param.getPhone()),"phone",param.getPhone());
        List<${entity}Entity> pageList = ${className}Service.list(queryWrapper);
        List<${entity}Vo> ${className}VoList = ${className}MapStruct.toVoList(pageList);
        log.info(this.getClass() + "findList-方法请求结果{}",${className}VoList);
        if (${className}VoList == null){
            log.error("数据空");
            return R.success(SubResultCode.DATA_NULL.subCode(),SubResultCode.DATA_NULL.subMsg());
        }
        return R.success(${className}VoList);
    }

    /**
     * *通过ID获取${table.comment} 列表
     **/
    @Override
    public ResObject getInfo(String id) {
        log.info(this.getClass() + "getInfo-方法请求参数{}",id);
        if (StrUtil.isEmpty(id)){
            return R.failure("数据空");
        }
        ${entity}Entity ${className} = ${className}Service.getById(${pkColumn.propertyName});
        ${entity}Vo ${className}Vo = BeanConvertUtils.copy(${className}, ${entity}Vo.class);
        log.info(this.getClass() + "getInfo-方法请求结果{}",${className}Vo);
        if (${className}Vo ==null){
            log.error("活动数据对象空");
            return R.success(SubResultCode.DATA_NULL.subCode(),SubResultCode.DATA_NULL.subMsg());
        }
        return R.success(${className}Vo);
    }

    /**
     * *保存${table.comment} 信息
     **/
    @Override
    public ResObject save(${entity}EditParam installParam) {
        log.info(this.getClass() + "save方法请求参数{}",installParam);
        if (installParam == null){
            log.error("数据空");
            return R.failure(SubResultCode.PARAMISBLANK.subCode(),SubResultCode.PARAMISBLANK.subMsg());
        }
        ${entity}Entity ${className} = BeanConvertUtils.copy(installParam, ${entity}Entity.class);
        Boolean result = ${className}Service.save(${className});
        log.info(this.getClass() + "save-方法请求结果{}",result);
        // 判断结果
        return result ?R.success(result):R.failure(result);
    }

    /**
     * *修改${table.comment} 信息
     **/
    @Override
    public ResObject update(${entity}EditParam updateParam) {
        log.info(this.getClass() + "update方法请求参数{}",updateParam);
        if (updateParam == null){
            log.error("数据空");
            return R.failure(SubResultCode.PARAMISBLANK.subCode(),SubResultCode.PARAMISBLANK.subMsg());
        }
        ${entity}Entity ${className} = BeanConvertUtils.copy(updateParam, ${entity}Entity.class);
        Boolean result = ${className}Service.updateById(${className});
        log.info(this.getClass() + "update-方法请求结果{}",result);
        // 判断结果
        return result ?R.success(result):R.failure(result);
    }

    /**
     * *删除${table.comment} 信息
     **/
    @Override
    public ResObject deleteByIds(String[] ids) {
        if (ids.length <= 0){
            log.error("数据空");
            return R.failure(SubResultCode.PARAMISBLANK.subCode(),SubResultCode.PARAMISBLANK.subMsg());
        }
        return R.toRes(${className}Service.removeByIds(Arrays.asList(${pkColumn.propertyName}s)));
    }

    /**
     * *通过id删除${table.comment} 信息
     **/
    @Override
    public ResObject deleteById(String id) {
        log.info(this.getClass() + "deleteById-方法请求参数{}",id);
        if(StrUtil.isEmpty(id)){
            log.error("ID数据空");
            return R.failure(SubResultCode.PARAMISBLANK.subCode(),SubResultCode.PARAMISBLANK.subMsg());
        }
        //QueryWrapper<String> queryWrapper = new QueryWrapper<String>();
        //queryWrapper.eq(StrUtil.isNotEmpty(id),"id",id);
        Boolean result = ${className}Service.removeById(id);
        log.info(this.getClass() + "deleteById-方法请求结果{}",result);
        // 判断结果
        return result ?R.success(result):R.failure(result);
    }

    /**
     * *导出${table.comment} 信息
     **/
    @Override
    public ResObject exportXls(${entity}PageQueryParam param, HttpServletResponse response)throws IOException {
        log.info(this.getClass() + "exportXls方法请求参数{}",param);
        QueryWrapper queryWrapper = this.getQueryWrapper(${className}MapStruct, param);
        List<${entity}Entity> list = ${className}Service.list(queryWrapper);
        List<${entity}Vo>${className}List = ${className}MapStruct.toVoList(list);
        ExcelUtils.exportExcel(${className}List, ${entity}Vo.class, "", new ExportParams(), response);
        return R.success("导出成功");
    }

    /**
     * *修改状态
     **/
    @Override
    public ResObject changeStatus(${entity}EditParam param) {
        log.info(this.getClass() + "changeStatus方法请求参数{}",param);
        if (StrUtil.isEmpty(param.getId())){
            log.error("ID数据空");
            return R.failure(SubResultCode.PARAMISBLANK.subCode(),SubResultCode.PARAMISBLANK.subMsg());
        }
        ${entity}Entity ${entity}Entity = new ${entity}Entity();
        ${entity}Entity.setId(param.getId());
        ${entity}Entity.setStatus(param.getStatus());
        //${entity}Entity.setUpdateTime()
        Boolean result = ${className}Service.updateById(${entity}Entity);
        log.info(this.getClass() +"changeStatus方法请求对象参数{}，请求结果{}",${entity}Entity,result);
        // 判断结果
        return result ?R.success(result):R.failure(result);
    }

}

